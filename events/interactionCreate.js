const fs = require('fs');
const path = require('path');
const { InteractionType, EmbedBuilder, ChannelType, MessageFlags } = require('discord.js');
const config = require('../config/config.js');
const { saveTranscript } = require('../utils/saveTranscript.js');

module.exports = {
  name: 'interactionCreate',
  async execute(interaction, client) {
    try {
      // Modal Submit: ‡∏õ‡∏¥‡∏î Ticket ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•
      if (interaction.type === InteractionType.ModalSubmit) {
        if (interaction.customId === 'modal_close_reason') {
          // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô interaction ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
          await interaction.deferReply({ flags: MessageFlags.Ephemeral  });

          const reason = interaction.fields.getTextInputValue('close_reason');
          const ticketChannel = interaction.channel;
          const user = interaction.user;

          const ticketId = ticketChannel.name.split('-')[1] || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
          let openerId;

          try {
            const topicData = JSON.parse(ticketChannel.topic || '{}');
            openerId = topicData.openerId;
          } catch (error) {
            console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö openerId ‡πÉ‡∏ô topic ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á topic ‡πÄ‡∏õ‡πá‡∏ô JSON');
            openerId = null;
          }

          if (!openerId) {
            return interaction.editReply({
              content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î Ticket ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
            });
          }

          const closerId = user.id;
          const openedAt = `<t:${Math.floor(ticketChannel.createdTimestamp / 1000)}:F>`;

          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Transcript
          await saveTranscript(ticketChannel);

          // ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed
          const embed = new EmbedBuilder()
            .setTitle(`üì™ Ticket Closed`)
            .addFields(
              { name: 'üÜî Ticket ID', value: ticketId, inline: true },
              { name: 'üë§ ‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î', value: `<@${openerId}>`, inline: true },
              { name: 'üîí ‡∏ú‡∏π‡πâ‡∏õ‡∏¥‡∏î', value: `<@${closerId}>`, inline: true },
              { name: 'üìÖ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î', value: openedAt, inline: false },
              { name: 'üìÑ Reason', value: `**${reason}**`, inline: false }
            )
            .setColor(0xff5555)
            .setTimestamp();

          await ticketChannel.send({ embeds: [embed] });

          // ‡∏™‡πà‡∏á DM ‡πÑ‡∏õ‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î
          try {
            const opener = await interaction.guild.members.fetch(openerId);
            await opener.send({
              content: config.ticketCloseDM || '‚ùó Ticket ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß',
              embeds: [embed],
            });
          } catch {
            console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î Ticket ‡πÑ‡∏î‡πâ');
          }

          // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö interaction
          await interaction.editReply({
            content: `‚úÖ ‡∏õ‡∏¥‡∏î Ticket ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason}`,
          });

          console.log(`üì™ Ticket ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß:
          - ‡∏´‡πâ‡∏≠‡∏á: ${ticketChannel.name}
          - ‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î: ${openerId}
          - ‡∏ú‡∏π‡πâ‡∏õ‡∏¥‡∏î: ${closerId}
          - ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ${reason}`);

          setTimeout(() => ticketChannel.delete('Ticket closed with reason'), 3000);
          return;
        }
      }

      // Button interaction
      if (interaction.isButton()) {
        const buttonId = interaction.customId;

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ handler ‡∏õ‡∏∏‡πà‡∏°
        const buttonPath = path.join(__dirname, '..', 'components', 'buttons', `${buttonId}.js`);
        if (fs.existsSync(buttonPath)) {
          const button = require(buttonPath);
          if (typeof button.execute === 'function') {
            await button.execute(interaction, client);
            return;
          }
        }

        if (buttonId === 'confirm_close_ticket') {
          const channel = interaction.channel;
          if (!channel || channel.type !== ChannelType.GuildText || !channel.name.startsWith('ticket-')) {
            return interaction.reply({ content: '‚ùå ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏ä‡πà‡∏≠‡∏á Ticket ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô', flags: MessageFlags.Ephemeral });
          }

          let openerId;
          try {
            const topicData = JSON.parse(channel.topic || '{}');
            openerId = topicData.openerId || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
          } catch {
            openerId = channel.topic || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';
          }

          const staffRoleId = config.staffRoleId;
          if (interaction.user.id !== openerId && !interaction.member.roles.cache.has(staffRoleId)) {
            return interaction.reply({ content: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ', flags: MessageFlags.Ephemeral });
          }

          // defer reply ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ interaction ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
          await interaction.deferReply({ flags: MessageFlags.Ephemeral  });

          try {
            await saveTranscript(channel);
            await channel.delete('Ticket ‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•)');

            console.log(`üì™ Ticket ${channel.name} ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢ ${interaction.user.tag} ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å transcript ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`);

            await interaction.editReply({ content: '‚úÖ ‡∏õ‡∏¥‡∏î Ticket ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å transcript ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
          } catch (error) {
            console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å transcript ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏¥‡∏î ticket:', error);
            await interaction.editReply({ content: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å transcript ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏¥‡∏î ticket' });
          }
          return;
        }

        console.warn(`‚ùó ‡πÑ‡∏°‡πà‡∏û‡∏ö handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° ${buttonId}`);
        return;
      }

      // Slash Command
      if (interaction.isChatInputCommand()) {
        const command = client.commands.get(interaction.commandName);
        if (!command) return;
        await command.execute(interaction, client);
        return;
      }
    } catch (error) {
      console.error('Error in interactionCreate.js:', error);

      try {
        if (!interaction.replied && !interaction.deferred) {
          await interaction.reply({
            content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•',
            flags: MessageFlags.Ephemeral,
          });
        } else if (interaction.deferred && !interaction.replied) {
          await interaction.editReply({
            content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•',
          });
        }
      } catch (replyError) {
        if (replyError.code === 10062) {
          console.warn('Interaction ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ');
        } else {
          console.error('Error while sending error reply:', replyError);
        }
      }
    }
  },
};
