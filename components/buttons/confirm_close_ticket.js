const { EmbedBuilder, MessageFlags } = require('discord.js');
const config = require('../../config/config.js');
const { saveTranscript } = require('../../utils/saveTranscript.js');

module.exports = {
  async execute(interaction) {
    const channel = interaction.channel;
    const ticketId = channel.name.split('-')[1] || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö';

    // Defer reply ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÅ‡∏à‡πâ‡∏á Discord ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
    await interaction.deferReply({ flags: MessageFlags.Ephemeral  });

    // ‡πÅ‡∏õ‡∏•‡∏á topic ‡∏à‡∏≤‡∏Å JSON string ‡πÄ‡∏õ‡πá‡∏ô object
    let topicData;
    try {
      topicData = JSON.parse(channel.topic);
    } catch {
      topicData = null;
    }

    const openerId = topicData?.openerId || null;
    const closerId = interaction.user.id;
    const openedAt = `<t:${Math.floor(channel.createdTimestamp / 1000)}:F>`;

    let transcriptUrl;
    try {
      transcriptUrl = await saveTranscript(channel);
    } catch (err) {
      console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å transcript:', err);
      transcriptUrl = null;
    }

    const embed = new EmbedBuilder()
      .setTitle(`üì™ Ticket Closed`)
      .addFields(
        { name: 'üÜî Ticket ID', value: ticketId, inline: true },
        { name: 'üë§ ‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î', value: openerId ? `<@${openerId}>` : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö', inline: true },
        { name: 'üîí ‡∏ú‡∏π‡πâ‡∏õ‡∏¥‡∏î', value: `<@${closerId}>`, inline: true },
        { name: 'üìÖ ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î', value: openedAt, inline: false },
      )
      .setColor(0xff5555)
      .setTimestamp();

    if (openerId) {
      try {
        const opener = await interaction.guild.members.fetch(openerId);
        await opener.send({
          content: config.ticketCloseDM || '‚ùó Ticket ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß',
          embeds: [embed],
        });
      } catch (err) {
        console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á DM ‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î Ticket ‡πÑ‡∏î‡πâ:', err.message);
      }
    } else {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö openerId ‡πÉ‡∏ô topic ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á topic ‡πÄ‡∏õ‡πá‡∏ô JSON');
    }

    // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö interaction ‡∏´‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
    await interaction.editReply({
      content: 'üîí Ticket ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡πÑ‡∏°‡πà‡∏Å‡∏µ‡πà‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...',
    });

    console.log(`üì™ Ticket ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß:
- ‡∏´‡πâ‡∏≠‡∏á: ${channel.name}
- ‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î: ${openerId}
- ‡∏ú‡∏π‡πâ‡∏õ‡∏¥‡∏î: ${closerId}
- Transcript: ${transcriptUrl || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏î‡πâ'}
- ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: ‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ (‡∏õ‡∏¥‡∏î‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•)`);

    setTimeout(async () => {
      try {
        await channel.delete(`Closed by ${interaction.user.tag}`);
      } catch (error) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ:', error);
      }
    }, 3000);
  },
};
