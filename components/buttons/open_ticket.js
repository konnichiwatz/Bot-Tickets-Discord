const {
  ChannelType,
  PermissionsBitField,
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  EmbedBuilder,
  MessageFlags
} = require('discord.js');
const fs = require('fs');
const path = require('path');
const config = require('../../config/config.js');

module.exports = {
  customId: 'createTicket',
  async execute(interaction, client) {
    await interaction.deferReply({ flags: MessageFlags.Ephemeral });

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ ticket ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á
    const userTickets = interaction.guild.channels.cache.filter(
      (c) => c.name.startsWith('ticket-') && c.topic === interaction.user.id
    );

    if (userTickets.size >= config.maxTicketsPerUser) {
      return interaction.editReply({
        content: `‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡∏¥‡∏î Ticket ‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ${config.maxTicketsPerUser} ‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß`,
      });
    }

    // ‡πÇ‡∏´‡∏•‡∏î counter ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå
    const counterPath = path.join(__dirname, '../../data/ticketCounter.json');
    let counter = 1;
    if (fs.existsSync(counterPath)) {
      const file = fs.readFileSync(counterPath, 'utf8');
      counter = JSON.parse(file).last + 1;
    }

    const channelName = `ticket-${counter}`;
    console.log('STAFF ROLE ID:', config.staffRoleId);
    const staffRole = interaction.guild.roles.cache.get(config.staffRoleId);
    if (!staffRole) {
    return interaction.editReply({ content: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Staff Role ID ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ô config.js', flags: MessageFlags.Ephemeral });
    }

    const ticketChannel = await interaction.guild.channels.create({
      name: channelName,
      type: ChannelType.GuildText,
      parent: config.ticketCategoryId,
      topic: JSON.stringify({ openerId: interaction.user.id }),
      permissionOverwrites: [
        {
          id: interaction.guild.id,
          deny: [PermissionsBitField.Flags.ViewChannel],
        },
        {
          id: interaction.user.id,
          allow: [
            PermissionsBitField.Flags.ViewChannel,
            PermissionsBitField.Flags.SendMessages,
            PermissionsBitField.Flags.ReadMessageHistory,
          ],
        },
        {
          id: staffRole.id,
          allow: [
            PermissionsBitField.Flags.ViewChannel,
            PermissionsBitField.Flags.SendMessages,
            PermissionsBitField.Flags.ManageMessages,
          ],
        },
      ],
    });

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å counter ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå
    fs.writeFileSync(counterPath, JSON.stringify({ last: counter }));

    // ‡∏™‡πà‡∏á ping ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏ö‡πÉ‡∏ô 2 ‡∏ß‡∏¥
    const pingMsg = await ticketChannel.send({
      content: `<@${interaction.user.id}> <@&${config.staffRoleId}>`,
    });
    setTimeout(() => pingMsg.delete().catch(() => {}), 2000);

    // Embed + ‡∏õ‡∏∏‡πà‡∏°
    const embed = new EmbedBuilder()
      .setTitle(`üì© Ticket #${counter}`)
      .setDescription(config.ticketIntro || '‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î...')
      .setColor(0x00b9ff)
      .setTimestamp();

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('claim-ticket')
        .setLabel('üé´ Claim')
        .setStyle(ButtonStyle.Success),
      new ButtonBuilder()
        .setCustomId('closeTicket')
        .setLabel('‚ùå Close')
        .setStyle(ButtonStyle.Danger),
      new ButtonBuilder()
        .setCustomId('close-with-reason')
        .setLabel('üìù Close With Reason')
        .setStyle(ButtonStyle.Secondary)
    );

    await ticketChannel.send({ embeds: [embed], components: [row] });

    await interaction.editReply({
      content: `‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î Ticket ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏µ‡πà ${ticketChannel}`,
      flags: MessageFlags.Ephemeral,
    });
    
    console.log(`üì© ‡πÄ‡∏õ‡∏¥‡∏î Ticket:
  - ‡∏´‡πâ‡∏≠‡∏á: ${channelName}
  - ‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î: ${interaction.user.tag} (${interaction.user.id})
  - Ticket Number: ${counter}
  - ‡πÄ‡∏ß‡∏•‡∏≤: ${new Date().toLocaleString()}
    `);
  },
};
